1.


E(--ID)
E -> F
F(--ID)
F -> --F
F(ID)
F -> T
T(ID)
T -> ID
()

E(--ID)
E -> F
F(--ID)
F -> -F
F(-ID)
F -> -F
F(ID)
F -> T
T(ID)
T -> ID
()

2.
It does remove the ambiguity, since from right-to-left it's always clear which rules must have been followed.
E.G:
Let's say we have a word WORD:X that ends with a token x.
We know that the last nonterminal of the word must be a T, since T's the only non-terminal with a terminal at the far right hand side.


if X == '+': remove two plusses from the end of the word and repeat. There's still a T at the right hand side.
if X == 'ID': look at the token to the left of X. if '-': go to rule 3. If '--', got to rule 4. If '+', go to rule 1.



 3.
The immediate ANTLR grammar produces the second (incorrect) tree.
If you switch the rules "f -> MINUS f" and "f -> MINUS MINUS f" so the latter is on top, it produces the other parse tree.

4.
1  E  ->  F Ea
2  Ea -> '+' F Ea
3      | e
4  F  -> '-' '-' F
5      | T
6  T  -> ID Ta '+' '+' | ID
7  Ta -> '+' '+' Ta
8      | e


6.
The problem with the condition is that ambiguïty may rise when using mere lookahead of one; In this case when encountering
the nonterminal Ta, and seeing a '+' sign in the lookahead.
Example word:  ID '+' '+' '+' '+'

(in E)
Lookahead -> ID
Thus we take rule 1!

(in F)
Lookahead -> ID
Thus we take rule 5!

(in T)
Lookahead -> ID
Thus we take rule 6!

Stripping non-terminal..
word -> '+' '+' '+' '+'

(in Ta)
Lookahead -> '+'
We can take rule 7...
We can take rule 8...

I would merge two adjecent plusses into a single token. Therefore, lookahead would be able to make a distinction between rule 7 (++) and rule 8 (+).
This would only be possible of the plus in rule 2 is always surrounded by non-plus terminals, which it happens to be.

